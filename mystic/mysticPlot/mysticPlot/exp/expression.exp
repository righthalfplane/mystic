{
        equal_expression=10;
        logical_or_expression=10;
        logical_and_expression=22;
        bitwise_or_expression=73;
        bitwise_xor_expression=97;
        bitwise_and_expression=255;
        eqnoteq_expressions = 128;
        lessgreat_expression = 111;
        shift_expression=127;
        plusminus_expression=888;
        multdivmod_expression= 333;
        unary_expression=134;
        expression=1;
        IDENTIFIER = equal_expression;
        IDENTIFIER += equal_expression;
        IDENTIFIER -= equal_expression;
        IDENTIFIER /= equal_expression;
        IDENTIFIER *= equal_expression;
        IDENTIFIER %= equal_expression;
        IDENTIFIER ^= equal_expression;
        IDENTIFIER &= equal_expression;
        IDENTIFIER <<= equal_expression;
        IDENTIFIER >>= equal_expression;
        IDENTIFIER =logical_or_expression || logical_and_expression;
        IDENTIFIER =logical_and_expression && bitwise_or_expression;
        IDENTIFIER =bitwise_or_expression | bitwise_xor_expression;
        IDENTIFIER =bitwise_xor_expression ^ bitwise_and_expression;
        IDENTIFIER =bitwise_and_expression & eqnoteq_expressions;
        IDENTIFIER =eqnoteq_expressions != lessgreat_expression;
        IDENTIFIER =eqnoteq_expressions == lessgreat_expression;
        IDENTIFIER =lessgreat_expression < shift_expression;
        IDENTIFIER =lessgreat_expression > shift_expression;
        IDENTIFIER =lessgreat_expression >= shift_expression;
        IDENTIFIER =lessgreat_expression <= shift_expression;
        IDENTIFIER =shift_expression >> plusminus_expression;
        IDENTIFIER =shift_expression << plusminus_expression;
        IDENTIFIER =plusminus_expression + multdivmod_expression;
        IDENTIFIER =plusminus_expression - multdivmod_expression;
        IDENTIFIER =multdivmod_expression * unary_expression;
        IDENTIFIER =multdivmod_expression / unary_expression;
        IDENTIFIER =multdivmod_expression % unary_expression;
        IDENTIFIER = -unary_expression;
        IDENTIFIER = ~unary_expression;
        IDENTIFIER = !unary_expression;
        IDENTIFIER = sin (expression);
        print("IDENTIFIER %g\n",IDENTIFIER);
}
